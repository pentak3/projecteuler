/*
Problem 44: Pentagon numbers

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?

*/

//Solution

/*

Approach is to find 2 numbers (i & j), and perform sum & diff & make sure both sum & diff are equal to some another Pentagon number
i.e. Pi+ Pj == Pk and Pj-Pi == Pq (given Pj>Pi).
We also need the smallest possible i & j, which means we have to start from i=1

To pick numbers, consider this:

1st iteration: 1,5
2nd iteration: 1,12 5,12
3rd iteration: 1,22, 5,22, 12,22
...

We start with 1, for every new Pn (n>1) we calculate, we try Pn +- with all previous calculated Pentagonal numbers.
This way we use all combinbations of numbers from smallest.

Pi+Pj == Pk means k > i & k > j, which means we need to know if future number is Pentagonal or not.
To solve this, we can use quadratic equation formula
i.e. (-b +- Math.sqrt(b^2 - 4ac)) / 2a
Here,
2Pn = 3n^2-n
3n^2-n-2Pn = 0

Pj-Pi can also use the above quadratic equation. We could also use a map of previous calculated numbers for this. Both are O(1) time.

*/



function isPentagonal(num) {
	return ((1 + Math.sqrt(1+24*num))/6) % 1 == 0;
}

function findPentagonalNumbers() {
	var pentagonalNums = [1];
	var n = 2;
	while(true) {
		var pn = (n * (3*n - 1))/2;
		for(var i=0;i<pentagonalNums.length;i++) {
			if (isPentagonal(pentagonalNums[i]+pn) && isPentagonal(pn-pentagonalNums[i])) {
				return pn-pentagonalNums[i];
			}
		}
		pentagonalNums.push(pn);
		n += 1;
	}
}

console.time('time');
console.log(findPentagonalNumbers());
console.timeEnd('time');